#!/bin/bash
# @parseArger-begin
# @parseArger-help "I send an SOS to the world" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
# @parseArger-declarations
# @parseArger pos message "commit message"
# @parseArger opt url "site url"
# @parseArger opt hugo-bin "hugo executable" --default-value "hugo" --alias hugo
# @parseArger opt branch "git branch" --short b --default-value "main"
# @parseArger opt repository "git repo" --short r --default-value "origin" --alias repo
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
_arg_message="";
# OPTIONALS ARGUMENTS
_arg_url=
_arg_hugo_bin="hugo"
_arg_branch="main"
_arg_repository="origin"
# FLAGS
# NESTED
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "I send an SOS to the world:"
	echo -e "	message: commit message"
	echo -e "	--url <url>: site url"
	echo -e "	--hugo-bin|--hugo <hugo-bin>: hugo executable [default: ' hugo ']"
	echo -e "	-b, --branch <branch>: git branch [default: ' main ']"
	echo -e "	-r, --repository|--repo <repository>: git repo [default: ' origin ']"
	echo -e "Usage :
	$0 <message> [--url <value>] [--hugo-bin <value>] [--branch <value>] [--repository <value>]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--url)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_url="$2"
				shift
				;;
			--url=*)
				_arg_url="${_key##--url=}"
				;;
			
			--hugo|--hugo-bin)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_hugo_bin="$2"
				shift
				;;
			--hugo-bin=*)
				_arg_hugo_bin="${_key##--hugo-bin=}"
				;;
			--hugo=*)
				_arg_hugo_bin="${_key##--hugo=}"
				;;
			
			-b|--branch)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_branch="$2"
				shift
				;;
			--branch=*)
				_arg_branch="${_key##--branch=}"
				;;
			-b*)
				_arg_branch="${_key##-b}"
				;;
			
			-r|--repo|--repository)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_repository="$2"
				shift
				;;
			--repository=*)
				_arg_repository="${_key##--repository=}"
				;;
			--repo=*)
				_arg_repository="${_key##--repo=}"
				;;
			-r*)
				_arg_repository="${_key##-r}"
				;;
			
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="message"
	if [ "${_positionals_count}" -gt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_message ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	message: ${_arg_message}";
	echo -e "	url: ${_arg_url}";
	echo -e "	hugo-bin: ${_arg_hugo_bin}";
	echo -e "	branch: ${_arg_branch}";
	echo -e "	repository: ${_arg_repository}";

}

print_version()
{
	echo "";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;

# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

hx=("$_arg_hugo_bin" build --minify -d "docs");

"${hx[@]}";

if [ $? ]; then
	if git commit -am "$_arg_message" ; then
		git push origin "$_arg_branch";
	fi
fi

