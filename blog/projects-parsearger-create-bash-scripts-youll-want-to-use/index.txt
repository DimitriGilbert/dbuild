1:"$Sreact.fragment"
2:I[99638,["770","static/chunks/770-c6e6a01e844fec29.js","136","static/chunks/136-c10d66bd0a69dd87.js","177","static/chunks/app/layout-8979f8ec81e3e496.js"],"ThemeProvider"]
3:I[56208,["770","static/chunks/770-c6e6a01e844fec29.js","136","static/chunks/136-c10d66bd0a69dd87.js","177","static/chunks/app/layout-8979f8ec81e3e496.js"],"Navigation"]
4:I[49507,[],""]
5:I[52639,[],""]
7:I[91432,[],"OutletBoundary"]
9:I[91432,[],"MetadataBoundary"]
b:I[91432,[],"ViewportBoundary"]
d:I[69398,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/014afd35cbea7c6e.css","style"]
0:{"P":null,"b":"mbA9T-4IPqviXu7mzrQvT","p":"","c":["","blog","projects-parsearger-create-bash-scripts-youll-want-to-use",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","projects-parsearger-create-bash-scripts-youll-want-to-use","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/014afd35cbea7c6e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":["$","script",null,{"src":"https://cdn.counter.dev/script.js","data-id":"154c6878-7558-4eff-90f9-bd4904015df1","data-utcoffset":"1","async":true}]}],["$","body",null,{"className":"__className_e8ce0c","children":["$","$L2",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":[["$","$L3",null,{}],["$","main",null,{"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","projects-parsearger-create-bash-scripts-youll-want-to-use","d"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",null,["$","$L7",null,{"children":"$L8"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","JR2whtE1QH0uBJ7k-GWww",{"children":[["$","$L9",null,{"children":"$La"}],["$","$Lb",null,{"children":"$Lc"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$d","$undefined"],"s":false,"S":true}
e:I[62593,["770","static/chunks/770-c6e6a01e844fec29.js","771","static/chunks/771-a7f5bd77162fef7d.js","953","static/chunks/app/blog/%5Bslug%5D/page-2e3530fcf68f964a.js"],"PrefetchLink"]
f:I[67342,["770","static/chunks/770-c6e6a01e844fec29.js","771","static/chunks/771-a7f5bd77162fef7d.js","953","static/chunks/app/blog/%5Bslug%5D/page-2e3530fcf68f964a.js"],"TableOfContents"]
10:I[57382,["770","static/chunks/770-c6e6a01e844fec29.js","771","static/chunks/771-a7f5bd77162fef7d.js","953","static/chunks/app/blog/%5Bslug%5D/page-2e3530fcf68f964a.js"],"MarkdownRenderer"]
11:T1dbe,
So, who here writes **bash** scripts ? And among these scripts, some take arguments, right ? 
Ok ok, so, get me any kind of documentation, usage hint or anything, like, right NOW !

Yeah...it's ok, we've all been there, and if you didn't, you might (not) have had a look at [parsing](https://stackoverflow.com/a/14203146){:target="_blank"} arguments and (AND!) [options](https://sookocheff.com/post/bash/parsing-bash-script-arguments-with-shopts/){:target="_blank"} in a bash script...it's a whole kerfuffle ! Well, "NO MORE !" I say !

## Meet parseArger

[ParseArger](https://dimitrigilbert.github.io/parseArger/) is a bash program to generate standalone bash programs, at least :
* the argument and option parsing (hey, I'm not gonna take your job !),
* and a basic documentation (just the boring part),
* and an install script (...),
* and a bash completion script (...right ?),
* and an html form (whut ..?!)
* *aaaaand* a web server in bash (OH COOOOME ON !)(not really to be used apart from the time you can't do without... I'm just flexing ^^')

## TLDR

Oh, I know ya'll abunch of impatient nerds (at least I am...) so here is a quick run down to get going !

```bash
# download the install script
curl -s https://raw.githubusercontent.com/DimitriGilbert/parseArger/main/utils/get_parseArger -O;
# make it executable
chmod +x get_parseArger;
# install, use --help for... help...
./get_parseArger --install;
# source bashrc, only needed once, modify according to your shell (if you don't know, it's the good one :D)
source "$HOME/.bashrc"

# generate a project
parseArger project my-awesome-project \
  --description "this is a cool project !" \
  # no commit, push or nothing, for install script generation
  --git-repo "myRandomDevName/my_awesome_project" \
  --project-subcommand my-script \
  --project-subcommand another-script

cd my-awesome-project
./my-awesome-project --help
```

## Install

First things first, let's install the damn thing ! 
Open up a terminal and execute those commands :
```bash
# download the install script
curl -s https://raw.githubusercontent.com/DimitriGilbert/parseArger/main/utils/get_parseArger -O;
# You are thoughtfully encouraged to spend the next few minutes reading it, just to make sure I do not have nefarious purposes, thank you.

# make it executable
chmod +x get_parseArger;
# install
./get_parseArger --install;
# source bashrc, only needed once, modify according to your shell (if you don't know, it's the good one :D)
source "$HOME/.bashrc"

# check install
parseArger --help
```

More help is available on the install script, just type `./get_parseArger --help` in your terminal.

## Generate a script

Let's start simple with a script that has one argument, one option and one flag. We'll output the generated content to ./my-script.
```bash
parseArger generate \
  --help-message "this is a script" \
  --pos 'my-arg "my argument"' \
  --opt 'my-option "my option"' \
  --flag 'a-flag "boolean flag for my script"' \
  --output my-script
```

You are now free to add your actual code at the bottom of the generated file. It will not be modified if (when !) you update the parsing code using `parse`.
There are more options for --pos, --opt and --flag, I'll dive deeper into that in further articles ;).
Concerning variable created, `-` will be replaced with `_` and the variable will be prefixed with `_arg_`.
So --my-super-argument value is assigned to $_arg_my_super_argument

## Parse a script

Now that we have a script, needs have changed and we miss some options... Let's fix that then !
```bash
# -i (or --in-place) means that we update the file with the newly generated parsing code, keeping your custom code
parseArger parse ./my-script -i \
  --opt 'missing-option "my missing option"' \
  --opt 'another-opt "yet another one"'
```

Done, you you make the code that uses them :).

## Completion script

The best thing about the terminal ? completion ! 
You can't get your mouse on the most likely button you'll need to click in a window (erf, maybe, but ...the usability...).
Well, you can in a terminal :D. Creating the scripts manually though ? Gee..., no !

```bash
parseArger completely my-script ./my-script

source ./completely.bash
```

Remember you'll have to source the completion script to access completion in the terminal, you can add `source /path/to/my-script/completion.bash` to your .bashrc (or .zshrc and so on)

You will need [completely](https://github.com/DannyBen/completely) installed for the generation to work, but once generated it's standalone.

Sometimes, things here do not work as expected and I can't figure out why, if it does for you to, use this as a workaround

```bash
# do not run completely
parseArger completely my-script \
  ./my-script \
  --no-run-completely > completely.yaml

# use the completely preview and pipe to a file...
completely preview > completely.bash
```

## Documentation

We all have that pesky collegue that never remember how to use the oh so fantastic tools that you create (AKA you in 6 months).
Let's think about that guy a bit and throw him a bone with some documentation !

```bash
parseArger document ./my-script --out documentation.md
```

It's not perfect as it is just the command help in a md file, but it's a whole lot better than nothing, eh ?

## Project, anyone ?

You might say that is a whole bunch of mess for a puny script, and you'd be very right !
Who says you have to stop with one script though ? I didn't.
You'd have several ways to do that but I settled on a very opinionated project structure that is as follows

```
.
├── <program>
├── <program>.rc
├── completely.bash
├── completely.yaml
├── documentation.md
├── form.html
├── Makefile
├── readme.md
├── bin
│   ├── command-one
│   ├── command-two
│   ├── ...
└── utils
    ├── get_<program>
    ├── install
    └── webserver
```
And of course I made a parseArger command for that : `project`

```bash
parseArger project my-bash-project
```

Off the bat, it'll create the main program, an rc file for your bashrc, documentation, readme and misc stuff (makefile, installer, webserver, html form). It'll initialize a git repo in the created folder but won't add or commit anything.
With some options, it'll also create the `bin` folder and command scripts, configure the main program to use these commands (as for `generate` there'll be another article).

## What belongs to Ceasar

This project was started because I couldn't find out how to modify [argbash](https://github.com/matejak/argbash).
Most of the work was (well) done so I took the generated output and went at building a similar generator.
It is not as fancy as the original work and a bit of "grog brain developer" display ... but, meh, it works *and it's miiiine*.

On that subject, if you are interested in a more rounded up bash generator thingy, you might want to have a look at [bashly](https://github.com/DannyBen/bashly/), I use completely which is a part of it and it's awesome !

## What now ?

Well, have at it ! Have fun, create awesome scripts with sh load of options !
Also as I am the only user, it's getting hard to find bugs to squash, though I am pretty sure nests can be found.
And if no bugs are to be found, maybe you have a use case I didn't think of and everyone would benefit from.
All that can be done using issues on [parseArger's github repo](https://github.com/DimitriGilbert/parseArger).

Thanks for the read and I hope you found it useful (or at least entertaining :D )

See you around and happy coding !
6:["$","div",null,{"className":"min-h-screen pt-20","children":["$","div",null,{"className":"container mx-auto px-4 py-12","children":["$","div",null,{"className":"max-w-4xl mx-auto","children":[["$","header",null,{"className":"mb-8","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-muted-foreground mb-4","children":[["$","$Le",null,{"href":"/blog","className":"hover:text-primary transition-colors","children":"Blog"}],[["$","span",null,{"children":"/"}],["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-folder-open w-4 h-4","children":[["$","path","usdka0",{"d":"m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2"}],"$undefined"]}],["$","span",null,{"children":"Projects/parseArger/Create bash scripts you'll want to use"}]]]}],["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"ParseArger, create bash scripts you'll want to use"}],["$","p",null,{"className":"text-xl text-muted-foreground mb-6","children":"Generate standalone bash scripts with argument, option and flag parsing, documentation, completion and more !"}],["$","div",null,{"className":"flex flex-wrap items-center gap-4 text-sm text-muted-foreground","children":[["$","div",null,{"className":"flex items-center gap-2","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar w-4 h-4","children":[["$","path","1cmpym",{"d":"M8 2v4"}],["$","path","4m81vk",{"d":"M16 2v4"}],["$","rect","1hopcy",{"width":"18","height":"18","x":"3","y":"4","rx":"2"}],["$","path","8toen8",{"d":"M3 10h18"}],"$undefined"]}],["$","span",null,{"children":"10/8/2023"}]]}],["$","div",null,{"className":"flex items-center gap-2","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock w-4 h-4","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],["$","span",null,{"children":[6," min read"]}]]}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mt-4","children":[["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90","children":"General"}],[["$","$Le","bash",{"href":"/blog/tags/bash","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"bash"}]}],["$","$Le","terminal",{"href":"/blog/tags/terminal","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"terminal"}]}],["$","$Le","scripting",{"href":"/blog/tags/scripting","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"scripting"}]}],["$","$Le","parsearger",{"href":"/blog/tags/parsearger","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"parsearger"}]}],["$","$Le","tutorial",{"href":"/blog/tags/tutorial","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"tutorial"}]}]]]}]]}],["$","div",null,{"className":"grid lg:grid-cols-4 gap-8","children":[["$","div",null,{"className":"lg:col-span-1","children":["$","div",null,{"className":"sticky top-24","children":["$","$Lf",null,{"toc":[{"level":2,"title":"Meet parseArger","id":"meet-parsearger"},{"level":2,"title":"TLDR","id":"tldr"},{"level":1,"title":"download the install script","id":"download-the-install-script"},{"level":1,"title":"make it executable","id":"make-it-executable"},{"level":1,"title":"install, use --help for... help...","id":"install-use---help-for-help"},{"level":1,"title":"source bashrc, only needed once, modify according to your shell (if you don't know, it's the good one :D)","id":"source-bashrc-only-needed-once-modify-according-to-your-shell-if-you-dont-know-its-the-good-one-d"},{"level":1,"title":"generate a project","id":"generate-a-project"},{"level":2,"title":"Install","id":"install"},{"level":1,"title":"download the install script","id":"download-the-install-script"},{"level":1,"title":"You are thoughtfully encouraged to spend the next few minutes reading it, just to make sure I do not have nefarious purposes, thank you.","id":"you-are-thoughtfully-encouraged-to-spend-the-next-few-minutes-reading-it-just-to-make-sure-i-do-not-have-nefarious-purposes-thank-you"},{"level":1,"title":"make it executable","id":"make-it-executable"},{"level":1,"title":"install","id":"install"},{"level":1,"title":"source bashrc, only needed once, modify according to your shell (if you don't know, it's the good one :D)","id":"source-bashrc-only-needed-once-modify-according-to-your-shell-if-you-dont-know-its-the-good-one-d"},{"level":1,"title":"check install","id":"check-install"},{"level":2,"title":"Generate a script","id":"generate-a-script"},{"level":2,"title":"Parse a script","id":"parse-a-script"},{"level":1,"title":"-i (or --in-place) means that we update the file with the newly generated parsing code, keeping your custom code","id":"i-or---in-place-means-that-we-update-the-file-with-the-newly-generated-parsing-code-keeping-your-custom-code"},{"level":2,"title":"Completion script","id":"completion-script"},{"level":1,"title":"do not run completely","id":"do-not-run-completely"},{"level":1,"title":"use the completely preview and pipe to a file...","id":"use-the-completely-preview-and-pipe-to-a-file"},{"level":2,"title":"Documentation","id":"documentation"},{"level":2,"title":"Project, anyone ?","id":"project-anyone"},{"level":2,"title":"What belongs to Ceasar","id":"what-belongs-to-ceasar"},{"level":2,"title":"What now ?","id":"what-now"}]}]}]}],["$","article",null,{"className":"lg:col-span-3","children":["$","$L10",null,{"content":"$11"}]}]]}]]}]}]}]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
a:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Dbuild.io"}],["$","meta","2",{"name":"description","content":"Dbuild.io is a portfolio and blog showcasing projects and insights"}],["$","link","3",{"rel":"manifest","href":"/manifest.webmanifest","crossOrigin":"$undefined"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"32x32"}]]
8:null
