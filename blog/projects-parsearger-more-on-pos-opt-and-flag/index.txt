1:"$Sreact.fragment"
2:I[9638,["770","static/chunks/770-d117d88a0b5dc246.js","136","static/chunks/136-7b4df39f7abc5a34.js","177","static/chunks/app/layout-1faf8557a835509a.js"],"ThemeProvider"]
3:I[6208,["770","static/chunks/770-d117d88a0b5dc246.js","136","static/chunks/136-7b4df39f7abc5a34.js","177","static/chunks/app/layout-1faf8557a835509a.js"],"Navigation"]
4:I[9507,[],""]
5:I[2639,[],""]
7:I[1432,[],"OutletBoundary"]
9:I[1432,[],"MetadataBoundary"]
b:I[1432,[],"ViewportBoundary"]
d:I[9398,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/fdce52ade9f4f76e.css","style"]
0:{"P":null,"b":"mGUpJkJrsQTNUeGR-SVIs","p":"","c":["","blog","projects-parsearger-more-on-pos-opt-and-flag",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","projects-parsearger-more-on-pos-opt-and-flag","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/fdce52ade9f4f76e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":["$","body",null,{"className":"__className_e8ce0c","children":["$","$L2",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":[["$","$L3",null,{}],["$","main",null,{"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]}]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","projects-parsearger-more-on-pos-opt-and-flag","d"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",null,["$","$L7",null,{"children":"$L8"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","7BZlv-bfZR36UnRMvErAl",{"children":[["$","$L9",null,{"children":"$La"}],["$","$Lb",null,{"children":"$Lc"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$d","$undefined"],"s":false,"S":true}
e:I[2593,["770","static/chunks/770-d117d88a0b5dc246.js","629","static/chunks/629-6489d37a0f8fbe28.js","953","static/chunks/app/blog/%5Bslug%5D/page-0fe96e035d1b27a3.js"],"PrefetchLink"]
f:I[7342,["770","static/chunks/770-d117d88a0b5dc246.js","629","static/chunks/629-6489d37a0f8fbe28.js","953","static/chunks/app/blog/%5Bslug%5D/page-0fe96e035d1b27a3.js"],"TableOfContents"]
10:I[7382,["770","static/chunks/770-d117d88a0b5dc246.js","629","static/chunks/629-6489d37a0f8fbe28.js","953","static/chunks/app/blog/%5Bslug%5D/page-0fe96e035d1b27a3.js"],"MarkdownRenderer"]
11:T1f39,
Now that you know the basic of parseArger `generate` and `parse`, it's time to have a look at how we declare arguments, options and flags !

## --pos

Positional arguments are what most of us use in a bash script with `$1`, `$2`, `$...`
Well same thing here, but they have names And much more :

```bash
arg-name: positional argument name
description: positional argument description
--one-of <one-of>: accepted values, repeatable
--complete <complete>: bash built-in completely function, repeatable
--complete-custom <complete-custom>: completely custom dynamic suggestion, repeatable
--subcommand-directory <subcommand-directory>: directory containing subcommands, force subcommand, list parseArger script in directory to fill --one-of
--subcommand-variable <subcommand-variable>: array variable containing subcommand parts, force subcommand [default: ' __subcommand ']
--subcommand|--no-subcommand: is a subcommand
--subcommand-run|--no-subcommand-run: run subcommand, forces sub command
--subcommand-use-leftovers|--no-subcommand-use-leftovers: add leftover arguments to subcommand, forces subcommand
```

And a dumb example that generates a script that take one argument my-cmd and execute it as a subcommand using the leftover arguments, my-cmd must be one of "ls", "cd" or "cat" :
```bash
parseArger generate --pos \
  'my-cmd "an argument" --subcommand --subcommand-run --subcommand-use-leftovers --one-of ls --one-of cd --one-of cat'
```

### arg-name

The argument name, `-` will be replaced with `_` and the variable will be prefixed with `_arg_`.
So --my-super-argument value is assigned to $_arg_my_super_argument.

### description

Simple description for help, documentation and so on

### --one-of

Repeatable, The argument value must be one of, the most basic input validation, yeah !

```bash
parseArger generate --pos 'my-arg "my argument description" --one-of value1 --one-of value2'
```

### --complete

Repeatable, [Completely built-ins](https://github.com/DannyBen/completely#suggesting-files-directories-and-other-bash-built-ins).

```bash
parseArger generate --pos 'my-file "this is a file path" --complete file'
```

### --complete-custom

Repeatable, [Completely custom](https://github.com/DannyBen/completely#suggesting-custom-dynamic-suggestions)

```bash
parseArger generate --pos 'my-arg "this is an argument" --complete-custom "\$(echo \"some_value some_other you_get the_point\")"'
```

### --subcommand-directory

You been a good kid and you did split your scripts ?
If they're all in the subcommand-directory, parseArger will add them to one of and build a __subcommand variable for you to use.
It forces --subcommand ... in case you were wondering.

```bash
parseArger generate --pos 'my-arg "this is an argument" --subcommand-directory bin'
```

### --subcommand-variable

Ooooh, oh you don't like __subcommand !!? What should it be called then ? It forces --subcommand.

```bash
parseArger generate --pos 'my-arg "this is an argument" --subcommand-variable notAsubCommand'
```

### --subcommand

This is a subcommand

```bash
parseArger generate --pos 'my-arg "this is a command argument" --subcommand'
```

### --subcommand-run

Run the subcommand before handing you the script, forces --subcommand.

```bash
parseArger generate --pos 'my-arg "this is an argument" --subcommand-run'
```

### --subcommand-use-leftovers

Maybe those leftovers are worth something..., after all ! Forces --subcommand

```bash
parseArger generate --pos 'my-arg "this is an argument" --subcommand-use-leftovers
```

## --opt

I'm pretty sure most of you were waiting for that : (add ethereal music here) options !

```bash
arg-name: positional argument name
description: positional argument description
--repeat-min <repeat-min>: minimum repeatition forces repeat [default: ' 1 ']
--repeat-max <repeat-max>: maximum repeatition forces repeat
--one-of <one-of>: accepted values, repeatable
-d, --default-value <default-value>: value, repeatable
-s, --short <short>: short form
--alias <alias>: option alias, repeatable
--empty-value <empty-value>: value for empty option
--complete <complete>: bash built-in completely function, repeatable
--complete-custom <complete-custom>: completely custom dynamic suggestion, repeatable
-r|--repeat|--no-repeat: repeatable
--empty|--no-empty: use option as flag
```

I won't bore you with arg-name and description, and if you need me too, you might want to re read the previous part a tiny tad more attentively, maybe, if you'd like to.

### --repeat-min

Repeatable option, yes ! but at least this many ! Forces --repeat.

```bash
parseArger generate --opt 'my-opt "this is an option" --repeat-min 42
```

### --repeat-max

Repeatable option, yes ! but not too much ! Forces --repeat.

```bash
parseArger generate --opt 'my-opt "this is an option" --repeat-max 69
```

### --one-of

see --pos --one-of above, it's the same ;)

### --default-value

An option, why not, but it shall not be empty !

```bash
parseArger generate --opt 'my-opt "musnt be eeeemmmmpty" --default-value "this is not empty"'
```

### --short

I know ya'll concerned about bodily efficiency (my mom called that "lazy"...), letters matters ! you got 26 of'em, that's how many options max my scripts have !

```bash
parseArger generate --opt 'my-opt "lazily call me" --short o'
```

### --alias

I know it's hard to always agree (especially with yourself !), with aliases, no more decision (about option names), you can have your cake, and eat it, too !

```bash
parseArger generate --opt 'a-opt "lazily call me" --alias "an-opt" --alias "an-option" --alias "needlessly-long-option-name"'
```

### --short

I know ya'll concerned about bodily efficiency (my mom called that "lazy"...), letters matters ! you got 26 of'em, that's how many options max my scripts have !

```bash
parseArger generate --opt 'my-opt "lazily call me" --short o'
```

### --complete

see --pos --complete above, it's the same ;)

### --complete-custom

see --pos --complete-custom above, it's the same ;)

### --repeat

You can now have multiple values for your option. the option is now an array, even if only one value is given.

```bash
parseArger generate --opt 'my-opt "look ma', I'am an array !" --repeat'
```

### --empty

Option or flag ? Well, why not both ? A flag if you don't give it anything, an option otherwise ! 

```bash
parseArger generate --opt 'my-opt "option>flag superposition" --empty'
```

## --flag

Ahoy ! raise the flaaaaaag ! (I'd say I'm grasping at branches, but it seems tree do not grow in the ocean...)

```bash
arg-name: positional argument name
description: positional argument description
-s, --short <short>: short form
--no-name <no-name>: value for the negation
--alias <alias>: flag alias, repeatable
--no-alias <no-alias>: flag negation alias, repeatable
--on|--no-on: on by default
```

You know the drill with arg-name, description, --short and alias, it's up above ;)

### --no-name

`--no-<flag-name>` do not fly ? Fine, you choose !

```bash
parseArger generate --flag 'do-that "flabbergasted, flag a..." --no-name dont-do-that'
```

### --no-alias

There are plenty of ways to say no !

```bash
parseArger generate --flag 'do-that "flabbergasted, flag a..." --no-alias this-instead --no-alias do-this'
```

### --on

It's already on... but you can turn it off.

```bash
parseArger generate --flag 'do-that "flabbergasted, flag a..." --on'
```

## What now ?

Now you almost have the whole view on parseArger, enough for simple scripts anyway !
But maybe you do not value your mental health much and would like to create a whole program in bash ?
Well, What a coincidence, next time we'll have a look at the `project` command, it'll help you do just that ! (the program part, I do not deal in mental health)
As always bugs and suggestions should go on [parseArger's github repo](https://github.com/DimitriGilbert/parseArger).

Thanks for the read and I hope you found it useful (or at least entertaining :D )

See you around and happy coding !6:["$","div",null,{"className":"min-h-screen pt-20","children":["$","div",null,{"className":"container mx-auto px-4 py-12","children":["$","div",null,{"className":"max-w-4xl mx-auto","children":[["$","header",null,{"className":"mb-8","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-muted-foreground mb-4","children":[["$","$Le",null,{"href":"/blog","className":"hover:text-primary transition-colors","children":"Blog"}],[["$","span",null,{"children":"/"}],["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-folder-open w-4 h-4","children":[["$","path","usdka0",{"d":"m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2"}],"$undefined"]}],["$","span",null,{"children":"Projects/parseArger/More on pos opt and flag"}]]]}],["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"ParseArger, more on Pos Opt and Flag"}],["$","p",null,{"className":"text-xl text-muted-foreground mb-6","children":"Options with default values ? Repeatable options or aliases maybe ? This is a deeper dive into parseArger's arguments, options and flags generation."}],["$","div",null,{"className":"flex flex-wrap items-center gap-4 text-sm text-muted-foreground","children":[["$","div",null,{"className":"flex items-center gap-2","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar w-4 h-4","children":[["$","path","1cmpym",{"d":"M8 2v4"}],["$","path","4m81vk",{"d":"M16 2v4"}],["$","rect","1hopcy",{"width":"18","height":"18","x":"3","y":"4","rx":"2"}],["$","path","8toen8",{"d":"M3 10h18"}],"$undefined"]}],["$","span",null,{"children":"10/13/2023"}]]}],["$","div",null,{"className":"flex items-center gap-2","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock w-4 h-4","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],["$","span",null,{"children":[6," min read"]}]]}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mt-4","children":[["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90","children":"General"}],[["$","$Le","bash",{"href":"/blog/tags/bash","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"bash"}]}],["$","$Le","terminal",{"href":"/blog/tags/terminal","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"terminal"}]}],["$","$Le","scripting",{"href":"/blog/tags/scripting","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"scripting"}]}],["$","$Le","parsearger",{"href":"/blog/tags/parsearger","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"parsearger"}]}],["$","$Le","tutorial",{"href":"/blog/tags/tutorial","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"tutorial"}]}]]]}]]}],["$","div",null,{"className":"grid lg:grid-cols-4 gap-8","children":[["$","div",null,{"className":"lg:col-span-1","children":["$","div",null,{"className":"sticky top-24","children":["$","$Lf",null,{"toc":[{"level":2,"title":"--pos","id":"pos"},{"level":3,"title":"arg-name","id":"arg-name"},{"level":3,"title":"description","id":"description"},{"level":3,"title":"--one-of","id":"one-of"},{"level":3,"title":"--complete","id":"complete"},{"level":3,"title":"--complete-custom","id":"complete-custom"},{"level":3,"title":"--subcommand-directory","id":"subcommand-directory"},{"level":3,"title":"--subcommand-variable","id":"subcommand-variable"},{"level":3,"title":"--subcommand","id":"subcommand"},{"level":3,"title":"--subcommand-run","id":"subcommand-run"},{"level":3,"title":"--subcommand-use-leftovers","id":"subcommand-use-leftovers"},{"level":2,"title":"--opt","id":"opt"},{"level":3,"title":"--repeat-min","id":"repeat-min"},{"level":3,"title":"--repeat-max","id":"repeat-max"},{"level":3,"title":"--one-of","id":"one-of"},{"level":3,"title":"--default-value","id":"default-value"},{"level":3,"title":"--short","id":"short"},{"level":3,"title":"--alias","id":"alias"},{"level":3,"title":"--short","id":"short"},{"level":3,"title":"--complete","id":"complete"},{"level":3,"title":"--complete-custom","id":"complete-custom"},{"level":3,"title":"--repeat","id":"repeat"},{"level":3,"title":"--empty","id":"empty"},{"level":2,"title":"--flag","id":"flag"},{"level":3,"title":"--no-name","id":"no-name"},{"level":3,"title":"--no-alias","id":"no-alias"},{"level":3,"title":"--on","id":"on"},{"level":2,"title":"What now ?","id":"what-now"}]}]}]}],["$","article",null,{"className":"lg:col-span-3","children":["$","$L10",null,{"content":"$11"}]}]]}]]}]}]}]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
a:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Dbuild.io"}],["$","meta","2",{"name":"description","content":"Dbuild.io is a portfolio and blog showcasing projects and insights"}],["$","link","3",{"rel":"manifest","href":"/manifest.webmanifest","crossOrigin":"$undefined"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
8:null
