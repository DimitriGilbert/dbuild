1:"$Sreact.fragment"
2:I[99638,["770","static/chunks/770-c6e6a01e844fec29.js","136","static/chunks/136-c10d66bd0a69dd87.js","177","static/chunks/app/layout-8979f8ec81e3e496.js"],"ThemeProvider"]
3:I[56208,["770","static/chunks/770-c6e6a01e844fec29.js","136","static/chunks/136-c10d66bd0a69dd87.js","177","static/chunks/app/layout-8979f8ec81e3e496.js"],"Navigation"]
4:I[49507,[],""]
5:I[52639,[],""]
7:I[91432,[],"OutletBoundary"]
9:I[91432,[],"MetadataBoundary"]
b:I[91432,[],"ViewportBoundary"]
d:I[69398,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/014afd35cbea7c6e.css","style"]
0:{"P":null,"b":"mbA9T-4IPqviXu7mzrQvT","p":"","c":["","blog","projects-parsearger-completion-documentation-and-stuff",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","projects-parsearger-completion-documentation-and-stuff","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/014afd35cbea7c6e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":["$","script",null,{"src":"https://cdn.counter.dev/script.js","data-id":"154c6878-7558-4eff-90f9-bd4904015df1","data-utcoffset":"1","async":true}]}],["$","body",null,{"className":"__className_e8ce0c","children":["$","$L2",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":[["$","$L3",null,{}],["$","main",null,{"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","projects-parsearger-completion-documentation-and-stuff","d"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",null,["$","$L7",null,{"children":"$L8"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","kLcxf5yOLbhydDz5b-X2U",{"children":[["$","$L9",null,{"children":"$La"}],["$","$Lb",null,{"children":"$Lc"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$d","$undefined"],"s":false,"S":true}
e:I[62593,["770","static/chunks/770-c6e6a01e844fec29.js","771","static/chunks/771-a7f5bd77162fef7d.js","953","static/chunks/app/blog/%5Bslug%5D/page-2e3530fcf68f964a.js"],"PrefetchLink"]
f:I[67342,["770","static/chunks/770-c6e6a01e844fec29.js","771","static/chunks/771-a7f5bd77162fef7d.js","953","static/chunks/app/blog/%5Bslug%5D/page-2e3530fcf68f964a.js"],"TableOfContents"]
10:I[57382,["770","static/chunks/770-c6e6a01e844fec29.js","771","static/chunks/771-a7f5bd77162fef7d.js","953","static/chunks/app/blog/%5Bslug%5D/page-2e3530fcf68f964a.js"],"MarkdownRenderer"]
11:T2c26,
Now that you can [generate and parse](/projects/parsearger/generate-and-parse/) scripts with [fine tuned arguments, options and flags](/projects/parsearger/more-on-pos-opt-and-flag/), we are going to genrate supporting stuff for our scripts.

## Completion

Completion is a great feature of the terminal that allows you to complete commands, options and arguments by pressing the `tab` key. It is a great way to avoid typos and to discover new commands and options. For me, it is the main selling point on why you should use the terminal.
I use [completely](https://github.com/DannyBen/completely), so  you have to install it before generating the completion script, but the script itself is standalone. 
Here comes the help :

```bash
  command-name: command-name
  file: file
  --subcommand-directory|--subcmd-dir <subcommand-directory>: directory for subcommand target
  --completely-cmd|--cmpcmd <completely-cmd>: completely command, repeatable
  --extra-file <extra-file>: extra yaml declaration, repeatable
  --yaml-file <yaml-file>: yaml file name [default: ' completely.yaml ']
  --completion-file <completion-file>: completion file name [default: ' completely.bash ']
  --run-completely|--no-run-completely: run completely, on by default (use --no-run-completely to turn it off)
          no-aliases: --no-run,
  --discover-subcommand|--no-discover-subcommand: auto run completely on found subcommand
```

Let's have a look a few examples :

```bash
# generate completion for my-script
parseArger completely my-script "./my-script"

# generate completion for my-script and its subcommand in the ./bin directory
parseArger completely my-script "./my-script" --subcommand-directory "./bin"
```

Sometimes, for some esotheric reason, it does not work, but I found a work around :

```bash
# generate completion definition for completely
parseArger completely my-script "./my-script" --no-run-completely > completely.yaml
# run completely preview (that does work) and put the output in the completion script file
completely preview > completely.bash
```

### command-name

The command you generate the completion for

```bash
parseArger completely my-script ./my-script
```

### file

The executable file for `command-name`

```bash
parseArger completely my-script ./my-script
```

### --subcommand-directory

If your command has subcommands, you can specify the directory where they are located so it will generate the completion as well.

```bash
parseArger completely my-script ./my-script --subcommand-directory ./bin
```

### --completely-cmd

Completely is not installed inyour path ? It runs as a container ? That's ok, you can specify the command to run completely.

```bash
parseArger completely my-script ./my-script --completely-cmd "docker run --rm -it completely"
```

### --extra-file

The completion is generated from the arguments options and flags you defined in your script, but you can concatenate other yaml files to add more completion.

```bash
parseArger completely my-script ./my-script --extra-file ./my-script.completion.yaml
```

### --yaml-file

If the yaml file name does not suit you.

```bash
parseArger completely my-script ./my-script --yaml-file ./not-completely.yaml
```

### --completion-file

Same as for the yaml file.

```bash
parseArger completely my-script ./my-script --completion-file ./not-completely.bash
```

### --[no-]run-completely

Output the yaml file to stdout

```bash
parseArger completely my-script ./my-script --no-run-completely
```

### --[no-]discover-subcommand

If you have subcommands, you can generate the completion for them as well, but you don't have to.

```bash
parseArger completely my-script ./my-script --no-discover-subcommand
```

## Documentation

making things is coll, but making so that others (or you, after a while) can use whatever you put out there is even cooler. But it is also very long and boring. So I made a tool to do some of it for me. I don't use the output as is but it's a good starting point ;).

```bash
  -f, --file <file>: file to document, repeatable
  -d, --directory|--folder <directory>: directory to document, repeatable
  -o, --out <out>: output file
  --tag <tag>: markdown tag for title [default: ' ## ']
  --next-tag-prepend <next-tag-prepend>: prepend to next title tag level [default: ' # ']
  --title <title>: documentation title [default: ' Usage ']
  --title-tag <title-tag>: documentation title tag [default: ' # ']
  --sub-directory|--no-sub-directory: document subdirectory, on by default (use --no-sub-directory to turn it off)
  --append-output|--no-append-output: add to output file if it exists, on by default (use --no-append-output to turn it off)
```

and a few examples :

```bash
# generate completion for my-script
parseArger document --file "./my-script" --out "./my-script documentation.md"

# generate completion for my-script and all the scripts in the ./bin directory, erase "my-script documentatino.md" if it exists
parseArger document --file "./my-script" --directory "./bin" --out "./my-script documentation.md" --no-append-output
```

### --file

Document this file, repeatable. First in first out.

```bash
# generate completion for my-script and my-other-script
parseArger document --file "./my-script" --file "./my-other-script"
```

### --directory

Document all parseArger scripts in this directory, repeatable. First in first out.

```bash
# generate completion for all the scripts in the ./bin and ./I/put/stuff/every/where directories
parseArger document --directory "./bin" --directory "./I/put/stuff/every/where"
```

### --out

If not specified, I will barf all over stdout !

```bash
# generate completion output to stdout
parseArger document --file "./my-script"
# generate completion output to documentation.md
parseArger document --file "./my-script" --out "./documentation.md"
```

### --tag

I shall use a tag for titles, default is ` ## `. But you know, if youd rather have h6, you can do that.

```bash
parseArger document --file "./my-script" --tag "######"
```

### --next-tag-prepend

I start taggin with --tag value, but for each subsequent title, I prepend this value to the tag. Default is ` # `.

```bash
parseArger document --file "./my-script" --next-tag-prepend "######"
```

### --title

If you wanna get fancy with your title, otherwise you'll get a boring ` Usage `.

```bash
parseArger document --file "./my-script" --title "How to use my script"
```

### --title-tag

I already have an h1  bladi bladi blada, whatever ...!

```bash
parseArger document --file "./my-script" --title-tag "###"
```

### --[no-]sub-directory

If you ain't tellin' me, I'll go though your stuff !

```bash
parseArger document --directory "./bin" --no-sub-directory
```

### --[no-]append-output

That is usually how I clean, using a black hole !

```bash
parseArger document --file "./my-script" --out "./documentation.md" --no-append-output
```

## HTML form

Wait, what ?!! Why would a bash CLI script need a form ? Well, it doesn't, but I had the idea of using them for documentation purposes.
They come bundled with some (very dirty) javascript to generate a command from the input so less terminally inclined people can take advantage of your tools too (and maybe, just maybe learn to appreciate it ;) ).

```bash
  file: file to process
  --command <command>: command string, default to file 
  --action <action>: form action
  --form-class <form-class>: form html class
  --input-container-class <input-container-class>: input container class [default: ' form-group ']
  --input-class <input-class>: input class [default: ' form-control ']
  --label-class <label-class>: label class [default: ' form-label ']
  --select-class <select-class>: select class [default: ' form-select ']
  --checkbox-container-class|--radio-container-class <checkbox-container-class>: checkbox and radio class [default: ' form-check ']
  --checkbox-class|--radio-class <checkbox-class>: checkbox and radio class [default: ' form-check-input ']
  --checkbox-label-class|--radio-label-class <checkbox-label-class>: checkbox and radio label class [default: ' form-check-label ']
  --parent-form <parent-form>: parent form for result
  --form|--no-form: display form, on by default (use --no-form to turn it off)
  --button|--no-button: display button, on by default (use --no-button to turn it off)
  --js|--no-js: create javascript, --no-js forces --no-result, on by default (use --no-js to turn it off)
  --result|--no-result: display result, on by default (use --no-result to turn it off)
```

## file

A simple form for a simple file.

```bash
# 
parseArger html-form my-script

```

## --command

If your filename do not match the command you want to run (for alias reasons), you can specify it here.

```bash
# when you do not want to keep things simple
parseArger html-form my-script --command "my-script-alias"

```

## --action

The form does not go anywhere by default, but you can change that !

```bash
# Where I want to go
parseArger html-form my-script --action "/over/the/rainbow"

```

## --form-class

The form uses bootstrap classes by default so it's easy and quick to make them pretty.
I won't repeat it, but it goes for all *-class options.

```bash
# Me no like bootstrap !
parseArger html-form my-script --form-class "my-form-class"

```

## --input-container-class

```bash
# 
parseArger html-form my-script --input-container-class "my-input-container-class"

```

## --input-class

```bash
# 
parseArger html-form my-script --input-class "my-input-class"

```

## --label-class

```bash
# 
parseArger html-form my-script --label-class "my-label-class"

```

## --select-class

```bash
# 
parseArger html-form my-script --select-class "my-select-class"

```

## --checkbox-container-class

```bash
# 
parseArger html-form my-script  --checkbox-container-class "my-checkbox-container-class"

```

## --checkbox-class

```bash
# 
parseArger html-form my-script --checkbox-class "my-checkbox-class"

```

## --checkbox-label-class

```bash
# 
parseArger html-form my-script --checkbox-label-class "my-checkbox-label-class"

```

## --parent-form

When you have sub commands, forms nest into one-another. You can specify the parent form id here.

```bash
# 
parseArger html-form my-script --parent-form "my-parent-form"

```

## --form

Then main form id

```bash
# 
parseArger html-form my-script --form "my-form"

```

## --[no-]button

On by default, --no- to not create a button

```bash
# 
parseArger html-form my-script --no-button

```

## --[no-]js

On by default, --no- to not create javascript

```bash
# 
parseArger html-form my-script --no-js

```

## --[no-]result

On by default, --no- to not show results

```bash
# 
parseArger html-form my-script --no-result

```

## What now ?

Completion scripts and documentions are a waiting ! You can now **more than ever** make your bash tools **even more awesome** (or useful, but who cares about that, uh ? ;) ) ! And if you get so inclined as create a GUI for your script, you have a starting point with the html form (I never said it was a good one ^^).
As always bugs and suggestions should go on [parseArger's github repo](https://github.com/DimitriGilbert/parseArger).

Thanks for the read and I hope you found it useful (or at least entertaining :D )

See you around and happy coding !
6:["$","div",null,{"className":"min-h-screen pt-20","children":["$","div",null,{"className":"container mx-auto px-4 py-12","children":["$","div",null,{"className":"max-w-4xl mx-auto","children":[["$","header",null,{"className":"mb-8","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-muted-foreground mb-4","children":[["$","$Le",null,{"href":"/blog","className":"hover:text-primary transition-colors","children":"Blog"}],[["$","span",null,{"children":"/"}],["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-folder-open w-4 h-4","children":[["$","path","usdka0",{"d":"m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2"}],"$undefined"]}],["$","span",null,{"children":"Projects/parseArger/Completion, documentation and stuff"}]]]}],["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"ParseArger, completion, documentation and stuff"}],["$","p",null,{"className":"text-xl text-muted-foreground mb-6","children":"Learn all about the completion, documentation and supporting stuff for your scripts that you can generate with ParseArger."}],["$","div",null,{"className":"flex flex-wrap items-center gap-4 text-sm text-muted-foreground","children":[["$","div",null,{"className":"flex items-center gap-2","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar w-4 h-4","children":[["$","path","1cmpym",{"d":"M8 2v4"}],["$","path","4m81vk",{"d":"M16 2v4"}],["$","rect","1hopcy",{"width":"18","height":"18","x":"3","y":"4","rx":"2"}],["$","path","8toen8",{"d":"M3 10h18"}],"$undefined"]}],["$","span",null,{"children":"10/16/2023"}]]}],["$","div",null,{"className":"flex items-center gap-2","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock w-4 h-4","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],["$","span",null,{"children":[8," min read"]}]]}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mt-4","children":[["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90","children":"General"}],[["$","$Le","bash",{"href":"/blog/tags/bash","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"bash"}]}],["$","$Le","terminal",{"href":"/blog/tags/terminal","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"terminal"}]}],["$","$Le","scripting",{"href":"/blog/tags/scripting","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"scripting"}]}],["$","$Le","parsearger",{"href":"/blog/tags/parsearger","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"parsearger"}]}],["$","$Le","tutorial",{"href":"/blog/tags/tutorial","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"tutorial"}]}]]]}]]}],["$","div",null,{"className":"grid lg:grid-cols-4 gap-8","children":[["$","div",null,{"className":"lg:col-span-1","children":["$","div",null,{"className":"sticky top-24","children":["$","$Lf",null,{"toc":[{"level":2,"title":"Completion","id":"completion"},{"level":1,"title":"generate completion for my-script","id":"generate-completion-for-my-script"},{"level":1,"title":"generate completion for my-script and its subcommand in the ./bin directory","id":"generate-completion-for-my-script-and-its-subcommand-in-the-bin-directory"},{"level":1,"title":"generate completion definition for completely","id":"generate-completion-definition-for-completely"},{"level":1,"title":"run completely preview (that does work) and put the output in the completion script file","id":"run-completely-preview-that-does-work-and-put-the-output-in-the-completion-script-file"},{"level":3,"title":"command-name","id":"command-name"},{"level":3,"title":"file","id":"file"},{"level":3,"title":"--subcommand-directory","id":"subcommand-directory"},{"level":3,"title":"--completely-cmd","id":"completely-cmd"},{"level":3,"title":"--extra-file","id":"extra-file"},{"level":3,"title":"--yaml-file","id":"yaml-file"},{"level":3,"title":"--completion-file","id":"completion-file"},{"level":3,"title":"--[no-]run-completely","id":"no-run-completely"},{"level":3,"title":"--[no-]discover-subcommand","id":"no-discover-subcommand"},{"level":2,"title":"Documentation","id":"documentation"},{"level":1,"title":"generate completion for my-script","id":"generate-completion-for-my-script"},{"level":1,"title":"generate completion for my-script and all the scripts in the ./bin directory, erase \"my-script documentatino.md\" if it exists","id":"generate-completion-for-my-script-and-all-the-scripts-in-the-bin-directory-erase-my-script-documentatinomd-if-it-exists"},{"level":3,"title":"--file","id":"file"},{"level":1,"title":"generate completion for my-script and my-other-script","id":"generate-completion-for-my-script-and-my-other-script"},{"level":3,"title":"--directory","id":"directory"},{"level":1,"title":"generate completion for all the scripts in the ./bin and ./I/put/stuff/every/where directories","id":"generate-completion-for-all-the-scripts-in-the-bin-and-iputstuffeverywhere-directories"},{"level":3,"title":"--out","id":"out"},{"level":1,"title":"generate completion output to stdout","id":"generate-completion-output-to-stdout"},{"level":1,"title":"generate completion output to documentation.md","id":"generate-completion-output-to-documentationmd"},{"level":3,"title":"--tag","id":"tag"},{"level":3,"title":"--next-tag-prepend","id":"next-tag-prepend"},{"level":3,"title":"--title","id":"title"},{"level":3,"title":"--title-tag","id":"title-tag"},{"level":3,"title":"--[no-]sub-directory","id":"no-sub-directory"},{"level":3,"title":"--[no-]append-output","id":"no-append-output"},{"level":2,"title":"HTML form","id":"html-form"},{"level":2,"title":"file","id":"file"},{"level":2,"title":"--command","id":"command"},{"level":1,"title":"when you do not want to keep things simple","id":"when-you-do-not-want-to-keep-things-simple"},{"level":2,"title":"--action","id":"action"},{"level":1,"title":"Where I want to go","id":"where-i-want-to-go"},{"level":2,"title":"--form-class","id":"form-class"},{"level":1,"title":"Me no like bootstrap !","id":"me-no-like-bootstrap"},{"level":2,"title":"--input-container-class","id":"input-container-class"},{"level":2,"title":"--input-class","id":"input-class"},{"level":2,"title":"--label-class","id":"label-class"},{"level":2,"title":"--select-class","id":"select-class"},{"level":2,"title":"--checkbox-container-class","id":"checkbox-container-class"},{"level":2,"title":"--checkbox-class","id":"checkbox-class"},{"level":2,"title":"--checkbox-label-class","id":"checkbox-label-class"},{"level":2,"title":"--parent-form","id":"parent-form"},{"level":2,"title":"--form","id":"form"},{"level":2,"title":"--[no-]button","id":"no-button"},{"level":2,"title":"--[no-]js","id":"no-js"},{"level":2,"title":"--[no-]result","id":"no-result"},{"level":2,"title":"What now ?","id":"what-now"}]}]}]}],["$","article",null,{"className":"lg:col-span-3","children":["$","$L10",null,{"content":"$11"}]}]]}]]}]}]}]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
a:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Dbuild.io"}],["$","meta","2",{"name":"description","content":"Dbuild.io is a portfolio and blog showcasing projects and insights"}],["$","link","3",{"rel":"manifest","href":"/manifest.webmanifest","crossOrigin":"$undefined"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"32x32"}]]
8:null
