1:"$Sreact.fragment"
2:I[9638,["770","static/chunks/770-d117d88a0b5dc246.js","136","static/chunks/136-7b4df39f7abc5a34.js","177","static/chunks/app/layout-1faf8557a835509a.js"],"ThemeProvider"]
3:I[6208,["770","static/chunks/770-d117d88a0b5dc246.js","136","static/chunks/136-7b4df39f7abc5a34.js","177","static/chunks/app/layout-1faf8557a835509a.js"],"Navigation"]
4:I[9507,[],""]
5:I[2639,[],""]
7:I[1432,[],"OutletBoundary"]
9:I[1432,[],"MetadataBoundary"]
b:I[1432,[],"ViewportBoundary"]
d:I[9398,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/fdce52ade9f4f76e.css","style"]
0:{"P":null,"b":"8-VEMIRkDgWRn75dcapmp","p":"","c":["","blog","projects-parsearger-generate-and-parse",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","projects-parsearger-generate-and-parse","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/fdce52ade9f4f76e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","body",null,{"className":"__className_e8ce0c","children":["$","$L2",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":[["$","$L3",null,{}],["$","main",null,{"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]}],["$","script",null,{"src":"https://cdn.counter.dev/script.js","data-id":"154c6878-7558-4eff-90f9-bd4904015df1","data-utcoffset":"1"}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","projects-parsearger-generate-and-parse","d"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",null,["$","$L7",null,{"children":"$L8"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","2pmIN0h1tXLcB-uaXAMSj",{"children":[["$","$L9",null,{"children":"$La"}],["$","$Lb",null,{"children":"$Lc"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$d","$undefined"],"s":false,"S":true}
e:I[2593,["770","static/chunks/770-d117d88a0b5dc246.js","629","static/chunks/629-6489d37a0f8fbe28.js","953","static/chunks/app/blog/%5Bslug%5D/page-0fe96e035d1b27a3.js"],"PrefetchLink"]
f:I[7342,["770","static/chunks/770-d117d88a0b5dc246.js","629","static/chunks/629-6489d37a0f8fbe28.js","953","static/chunks/app/blog/%5Bslug%5D/page-0fe96e035d1b27a3.js"],"TableOfContents"]
10:I[7382,["770","static/chunks/770-d117d88a0b5dc246.js","629","static/chunks/629-6489d37a0f8fbe28.js","953","static/chunks/app/blog/%5Bslug%5D/page-0fe96e035d1b27a3.js"],"MarkdownRenderer"]
11:T1d74,
We [previously](/projects/parsearger/create-bash-scripts-youll-want-to-use) had a quick look at [parseArger](https://dimitrigilbert.github.io/parseArger/).
Let's focus on the generate and parse command today !
I tried to make my arguments descriptions fairly clear, but an example is always nice don't you think ?

## Generate

This command will generate (yeah I know, much creativity) a new bash script.
We'll have a look at them one by one but here are the whole lot of arguments, options and flags for the command. (yes, this is the output from --help ^^)

```bash
-p, --pos <pos>: positional argument declaration, repeatable
-o, --opt <opt>: optional arg declaration, repeatable
-f, --flag <flag>: flag declaration, repeatable
-s, --set <set>: declare var, repeatable
-l, --source <source>: file to source, repeatable
-m, --help-message <help-message>: help message for the command [default: ' I send an SOS to the world ']
--help-option <help-option>: help option trigger
--help-short-option <help-short-option>: short help option
--leftovers-name <leftovers-name>: extra arguments variable name [default: ' leftovers ']
--use-shebang <use-shebang>: shebang executable [default: ' /bin/bash ']
--set-version <set-version>: set version number
--version-opt-name <version-opt-name>: version option name [default: ' version ']
--version-short-option <version-short-option>: version short option name [default: ' v ']
--die-fn-name <die-fn-name>: die function name [default: ' die ']
--log-fn-name <log-fn-name>: log function name [default: ' log ']
--verbose-opt-name <verbose-opt-name>: verbose option name [default: ' verbose ']
--verbose-level <verbose-level>: default verbose level [default: ' 0 ']
--leftovers|--no-leftovers: accept extra arguments
--bang|--no-bang: include shebang, on by default (use --no-bang to turn it off)
--version-opt|--no-version-opt: generate version opt handling, on by default (use --no-version-opt to turn it off)
--use-verbose|--no-use-verbose: generate verbose level parser, on by default (use --no-use-verbose to turn it off)
--parse-leftovers|--no-parse-leftovers: parse leftovers, force leftover
```

Forget about --pos --opt and --flag, we are going over them in a different article.

### --set

repeatable, declare a variable at the top of the script.
It can use `$()` to run commands but be careful about escaping (which might cause trouble with parsing sometimes...)

```bash
parseArger generate --set 'my_var="my value"' \
  --set 'my_var_dynamic_var="\$(cat /a/file)"'
```

### --source

repeatable, source a file at the top of the script.

```bash
parseArger generate --source "/path/to/the/file"
```

### --help-message

the script help message. It might be a good idea to make it useful, but you don't have to... 3:-D

```bash
parseArger generate --help-message 'my script does something'
```

### --help-option

option used to trigger help, the fact that you can does not mean that you should.

```bash
parseArger generate --help-option 'not-very-helpful-help-opt'
```

### --help-short-option

short option help trigger

```bash
parseArger generate --help-short-option z
# because why not z ?
```

### --leftovers-name

extra argument array variable name. Forces --leftovers flag.

```bash
parseArger generate --leftovers-name "extra_args"
```

### --use-shebang

specify the shebang, the generated script does not change though, use at your own risk ;).
If you have cross shell compatibility tips and tricks, I am all ears !

```bash
parseArger generate --use-shebang "#!/bin/zsh"
```

### --set-version

give a version to the script, not enforcing any kind of whatever here, you can `--set-version "potato"`, i won't judge

```bash
parseArger generate --set-version "0.1-alpha-preview-48"
```

### --version-opt-name

version trigger option, `--version` by default, but if you hate conventions.

```bash
parseArger generate --version-opt-name revision
```

### --version-short-option

short option trigger for version

```bash
parseArger generate --version-short-option i
```

### --die-fn-name

who wouldn't choose how one dies ? Bar that, I'll let you choose how your script dies.

```bash
parseArger generate --die-fn-name wasted
```

### --log-fn-name

same as die, but I have nothing funny to add, so I think I am just rambling at this point, don't you think ?

```bash
parseArger generate --log-fn-name report
```

### --verbose-opt-name

.

```bash
parseArger generate --verbose-opt-name tmi
```

### --verbose-level

default verbose level for your script

```bash
parseArger generate --verbose-level 42
```

### --leftovers | --no-leftovers

do not waste ! Think about those poor scripts which do not have options.
So you pack all these nice extra arguments and options in an array for later ! And do not read from stdin before you finished it all !!

```bash
parseArger generate --leftovers
```

The array variable is `$_arg_leftovers` or `$_arg_<whatever you chose with --leftovers-name>`.

### --parse-leftovers | --no-parse-leftovers

Force --leftovers and if you hate unordered mess, you can parse the leftovers and look for option like syntax to be extracted in an associative array. How neat.

```bash
parseArger generate --parse-leftovers
```

The array variable is `$_arg_parsed_leftovers` or `$_arg_parsed_<whatever you chose with --leftovers-name>`.

### --bang | --no-bang

use a shebang, on by default

```bash
parseArger generate --no-bang
```

### --version-opt | --no-version-opt

versions are for looooooosers ! #mainOrDie

```bash
parseArger generate --no-version-opt
```

### --use-verbose | --no-use-verbose

when you have nothing to say anyway (or way too many, and you won't stop, and you know you should, but you won't...)

```bash
parseArger generate --no-use-verbose
```

## Parse

Whether it is because you forgot something, "oooh, i might be able to do that..." or "DO THAT !", requirements change, just generating the script is already nice but a way to update it would be nicer, like if we couuuuld... *parse* the script (...).
Like with `generate` command, the whole bunch of options and then details, if you don't find the documentation below, it's because it's the same as `generate`, so look up !

```bash
file: file to parse
-p, --pos <pos>: add positional argument declaration, repeatable
-o, --opt <opt>: add optional arg declaration, repeatable
-f, --flag <flag>: add flag declaration, repeatable
-s, --set <set>: add declare var, repeatable
-l, --source <source>: add file to source, repeatable
--set-version <set-version>: set version
-i|--inplace|--no-inplace: replace parseArger generated content in place
--leftovers|--no-leftovers: add leftovers
--parse-leftovers|--no-parse-leftovers: parse leftovers
```

### file

path to the file to parse, yes it is a positional argument, thank you for noticing the absence of `-`.
You are such an attentive reader :)

### --inplace

update the file directly, goes to stdout by default

## What now ?

Another article is coming to dive deeper in --pos, --opt and --flag options for both generate and parse so you can truly take full advantage of parseArger ;) ! 
But this has been most of my usage, barebones arguments, simple options (and a few flags, not often).
This is such a step up from bash scripts I created in the past, especially with the generated help !
What about you ? Would this help you or are you using other languages when "more complex" scripts are needed ?

Thanks for the read and I hope you found it useful (or at least entertaining :D )

See you around and happy coding !
6:["$","div",null,{"className":"min-h-screen pt-20","children":["$","div",null,{"className":"container mx-auto px-4 py-12","children":["$","div",null,{"className":"max-w-4xl mx-auto","children":[["$","header",null,{"className":"mb-8","children":[["$","div",null,{"className":"flex items-center gap-2 text-sm text-muted-foreground mb-4","children":[["$","$Le",null,{"href":"/blog","className":"hover:text-primary transition-colors","children":"Blog"}],[["$","span",null,{"children":"/"}],["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-folder-open w-4 h-4","children":[["$","path","usdka0",{"d":"m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2"}],"$undefined"]}],["$","span",null,{"children":"Projects/parseArger/Generate and Parse"}]]]}],["$","h1",null,{"className":"text-4xl font-bold mb-4","children":"ParseArger, generate and Parse"}],["$","p",null,{"className":"text-xl text-muted-foreground mb-6","children":"Deeper dive in parseArger generate and parse commands arguments and options."}],["$","div",null,{"className":"flex flex-wrap items-center gap-4 text-sm text-muted-foreground","children":[["$","div",null,{"className":"flex items-center gap-2","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar w-4 h-4","children":[["$","path","1cmpym",{"d":"M8 2v4"}],["$","path","4m81vk",{"d":"M16 2v4"}],["$","rect","1hopcy",{"width":"18","height":"18","x":"3","y":"4","rx":"2"}],["$","path","8toen8",{"d":"M3 10h18"}],"$undefined"]}],["$","span",null,{"children":"10/10/2023"}]]}],["$","div",null,{"className":"flex items-center gap-2","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock w-4 h-4","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","68esgv",{"points":"12 6 12 12 16 14"}],"$undefined"]}],["$","span",null,{"children":[6," min read"]}]]}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mt-4","children":[["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90","children":"General"}],[["$","$Le","bash",{"href":"/blog/tags/bash","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"bash"}]}],["$","$Le","terminal",{"href":"/blog/tags/terminal","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"terminal"}]}],["$","$Le","scripting",{"href":"/blog/tags/scripting","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"scripting"}]}],["$","$Le","parsearger",{"href":"/blog/tags/parsearger","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"parsearger"}]}],["$","$Le","tutorial",{"href":"/blog/tags/tutorial","children":["$","span",null,{"data-slot":"badge","className":"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground hover:bg-primary hover:text-primary-foreground","children":"tutorial"}]}]]]}]]}],["$","div",null,{"className":"grid lg:grid-cols-4 gap-8","children":[["$","div",null,{"className":"lg:col-span-1","children":["$","div",null,{"className":"sticky top-24","children":["$","$Lf",null,{"toc":[{"level":2,"title":"Generate","id":"generate"},{"level":3,"title":"--set","id":"set"},{"level":3,"title":"--source","id":"source"},{"level":3,"title":"--help-message","id":"help-message"},{"level":3,"title":"--help-option","id":"help-option"},{"level":3,"title":"--help-short-option","id":"help-short-option"},{"level":1,"title":"because why not z ?","id":"because-why-not-z"},{"level":3,"title":"--leftovers-name","id":"leftovers-name"},{"level":3,"title":"--use-shebang","id":"use-shebang"},{"level":3,"title":"--set-version","id":"set-version"},{"level":3,"title":"--version-opt-name","id":"version-opt-name"},{"level":3,"title":"--version-short-option","id":"version-short-option"},{"level":3,"title":"--die-fn-name","id":"die-fn-name"},{"level":3,"title":"--log-fn-name","id":"log-fn-name"},{"level":3,"title":"--verbose-opt-name","id":"verbose-opt-name"},{"level":3,"title":"--verbose-level","id":"verbose-level"},{"level":3,"title":"--leftovers | --no-leftovers","id":"leftovers---no-leftovers"},{"level":3,"title":"--parse-leftovers | --no-parse-leftovers","id":"parse-leftovers---no-parse-leftovers"},{"level":3,"title":"--bang | --no-bang","id":"bang---no-bang"},{"level":3,"title":"--version-opt | --no-version-opt","id":"version-opt---no-version-opt"},{"level":3,"title":"--use-verbose | --no-use-verbose","id":"use-verbose---no-use-verbose"},{"level":2,"title":"Parse","id":"parse"},{"level":3,"title":"file","id":"file"},{"level":3,"title":"--inplace","id":"inplace"},{"level":2,"title":"What now ?","id":"what-now"}]}]}]}],["$","article",null,{"className":"lg:col-span-3","children":["$","$L10",null,{"content":"$11"}]}]]}]]}]}]}]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
a:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Dbuild.io"}],["$","meta","2",{"name":"description","content":"Dbuild.io is a portfolio and blog showcasing projects and insights"}],["$","link","3",{"rel":"manifest","href":"/manifest.webmanifest","crossOrigin":"$undefined"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"32x32"}]]
8:null
